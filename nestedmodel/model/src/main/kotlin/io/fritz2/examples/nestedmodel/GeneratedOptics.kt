// GENERATED by io.fritz2.optics - NEVER CHANGE CONTENT MANUALLY!
package io.fritz2.examples.nestedmodel

import io.fritz2.optics.Lens
import io.fritz2.optics.buildLens
import kotlin.Boolean
import kotlin.String
import kotlin.collections.List

object Lenses {
  object Person {
    val id: Lens<io.fritz2.examples.nestedmodel.Person, String> = buildLens("id", { it.id },{ p,
        v -> p.copy(id = v)})

    val name: Lens<io.fritz2.examples.nestedmodel.Person, String> = buildLens("name", { it.name },{
        p, v -> p.copy(name = v)})

    val birthday: Lens<io.fritz2.examples.nestedmodel.Person, String> = buildLens("birthday", {
        it.birthday },{ p, v -> p.copy(birthday = v)})

    val address: Lens<io.fritz2.examples.nestedmodel.Person, io.fritz2.examples.nestedmodel.Address>
        = buildLens("address", { it.address },{ p, v -> p.copy(address = v)})

    val activities: Lens<io.fritz2.examples.nestedmodel.Person,
        List<io.fritz2.examples.nestedmodel.Activity>> = buildLens("activities", { it.activities },{
        p, v -> p.copy(activities = v)})
  }

  object Address {
    val street: Lens<io.fritz2.examples.nestedmodel.Address, String> = buildLens("street", {
        it.street },{ p, v -> p.copy(street = v)})

    val number: Lens<io.fritz2.examples.nestedmodel.Address, String> = buildLens("number", {
        it.number },{ p, v -> p.copy(number = v)})

    val postalCode: Lens<io.fritz2.examples.nestedmodel.Address, String> = buildLens("postalCode", {
        it.postalCode },{ p, v -> p.copy(postalCode = v)})

    val city: Lens<io.fritz2.examples.nestedmodel.Address, String> = buildLens("city", { it.city },{
        p, v -> p.copy(city = v)})
  }

  object Activity {
    val id: Lens<io.fritz2.examples.nestedmodel.Activity, String> = buildLens("id", { it.id },{ p,
        v -> p.copy(id = v)})

    val name: Lens<io.fritz2.examples.nestedmodel.Activity, String> = buildLens("name", { it.name
        },{ p, v -> p.copy(name = v)})

    val like: Lens<io.fritz2.examples.nestedmodel.Activity, Boolean> = buildLens("like", { it.like
        },{ p, v -> p.copy(like = v)})
  }
}
